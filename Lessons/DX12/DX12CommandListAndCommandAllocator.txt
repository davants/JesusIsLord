DX12CommandListAndCommandAllocator

This lesson will add two command objects, the command list and the command allocator.
	ID3D12CommandAllocator
	ID3D12GraphicsCommandList



Previous Lessons
	In previous lessons 
	ID3D12CommandQueue
	Other progress has been made by creating a class to contain DirectX components.
	We have also added the windows loop.
	We are not building our code in github.

Notes:
	To program/control the GPU, which means give it work to it, we use the interface objects we have been creating.
	Sometimes when we call the DirectX API the GPU performs the action immediately and we know the GPU is done when the 
	DirectX API function returns. These DirectX API functions do not use the command queue, they just perform the 
	action at that moment.
	Other times we add commands to a command queue and they are NOT done immediately; the GPU will execute them as soon as it 
	can, this is the command queue.
	This lesson is about creating the DirectX API objects needed to add commands to the command queue.
	We will not add commands yet, just create the DirectX objects and get them ready to accept commands which we will do
	in a future lesson.
	
	Commands are added to the command queue in groups.  Meaning, instead giving the queue one command at a time, we add 10 at a time.
	The GPU will grab the group of commands and run them. The group of commands are run by the GPU in the order they 
	were placed in the group.
	
	So how do we create a group of commands? We use the command allocator and the command list.
	
	The group of commands are kept in the command allocator. This stores the commands.
	So what is the command list for then?  The command list "records" the commands into the command allocator.
	
	Think of the command allocator as a piece of paper where you can write commands.
	Think of the command list as the pencil that "records" the commands on the piece of paper.
	
	After you have "recorded" several commands on the piece of paper you can put the piece of paper in the 
	command queue for future processing. Once you put the piece of paper in the command queue, 
	you should leave that piece of paper alone until you are sure the GPU has taken it out of the command queue and 
	run all the commands on the paper.  The GPU will run the commands on the paper (command allocator) in the 
	order they were recorded.
	
	Again, in this example, the command list is the pencil that writes down the commands on a piece of paper. The process of writing the
	commands on the paper is called "recording". The piece of paper is the command allocator.  After recording to a piece of paper, 
	you will put that piece of paper in the command queue so the GPU can get your commands.  The command queue can hold many pieces of
	paper and will get to yours as soon as it can.
	An example of the commands we would record on the command allocator would be something like the following.
		Record the command to clear the screen so we can start fresh.
		Record the command showing the GPU where the triangles are for the geometry shape we want it to draw.
		Record the command to "draw" various shapes; which would draw the graphics to the screen.
	
	We will not record any command in this lesson, just create the command allocator (paper) and the command list (pencil).
	
Step 1) Add the command allocator and command list pointers to the myDirectX class as private properties.
	Add them below the command queue pointer you added in an earlier lesson.
		
CODE
	ID3D12CommandAllocator * mpID3D12CommandAllocator = nullptr;
	ID3D12GraphicsCommandList * mpID3D12GraphicsCommandList = nullptr;
	
Notes	
	We first create the command allocator because to create the command list you must already have the command allocator.
	Add code to check the HRESULT after all the command objects and do not continue if there is an error.
	
Step 2) Add the initialization code for the command allocator to the existing "InitializeCommandObjects(void)" function.
	Add this code after the command queue initialization code.
	Add code to check the HRESULT after all the command objects and do not continue if there is an error.
	
CODE
	// Now the command allocator
	vResult = mpD3dDevice->CreateCommandAllocator(D3D12_COMMAND_LIST_TYPE_DIRECT, IID_PPV_ARGS(&mpID3D12CommandAllocator));

	if (vResult != S_OK)
	{
		MessageBox(nullptr, L"FAIL, Command Allocator was not created!", L"Working, but we have a problem!", MB_OK);
		return;
	}
	
	
Step 3) Add the initialization code for the command list to the existing "InitializeCommandObjects(void)" function.
	Add this code after the command allocator initialization code.
	Notice the "CreateCommandList" DirectX function also takes in the Command allocator so it can give it to the 
	command list.
	Add code to check the HRESULT after all the command objects and do not continue if there is an error.
	
CODE
	// Now the command list
	vResult = mpD3dDevice->CreateCommandList(0, D3D12_COMMAND_LIST_TYPE_DIRECT, mpID3D12CommandAllocator, nullptr, 
		IID_PPV_ARGS(&mpID3D12GraphicsCommandList));
		
	if (vResult != S_OK)
	{
		MessageBox(nullptr, L"FAIL, Command List was not created!", L"Working, but we have a problem!", MB_OK);
		return;
	}
	
Step 4) Close the command list. 
	When a command list is created it is open. We will close it for now.
	
CODE
	mpID3D12GraphicsCommandList->Close();

Step 5) Add the "Success" pop-up message box at the end of the InitializeCommandObjects function just to test things for now.
	This can be removed later. If there is already a "success" pop-up earlier in the function you can remove it in favor of this one.
	
CODE
	if (vResult == S_OK)
	{
		wstring vOutputMessage = L"Success - Command Objects were created";
		MessageBox(nullptr, vOutputMessage.c_str(), L"Working!!", MB_OK);
	}
	
Step 6) Deallocate the new objects in the myDirectX destructor. Remember, a destructor function automatically gets called when 
	the object is deleted. Meaning, when myDirectX gets deleted the destructor function will get called.

CODE	
	if (mpID3D12CommandAllocator != nullptr)
	{
		mpID3D12CommandAllocator->Release();
	}

	if (mpID3D12GraphicsCommandList != nullptr)
	{
		mpID3D12GraphicsCommandList->Release();
	}
	
	
	
	
Done!

Run and test your code.

	
	
Here is the complete definition code for the InitializeCommandObjects() function.
	
HRESULT myDirectX::InitializeCommandObjects(void)
{
	HRESULT vResult = E_FAIL;

	D3D12_COMMAND_QUEUE_DESC queueDesc = {};
	queueDesc.Type = D3D12_COMMAND_LIST_TYPE_DIRECT;
	queueDesc.Flags = D3D12_COMMAND_QUEUE_FLAG_NONE;
	vResult = mpD3dDevice->CreateCommandQueue(&queueDesc, IID_PPV_ARGS(&mpID3D12CommandQueue));
	
	if(vResult != S_OK)
	{
		MessageBox(nullptr, L"FAIL, ID3D12CommandQueue was not created!", L"Working, but we have a problem!", MB_OK);
		return vResult;
	}
	
	// Now the command allocator
	vResult = mpD3dDevice->CreateCommandAllocator(D3D12_COMMAND_LIST_TYPE_DIRECT, IID_PPV_ARGS(&mpID3D12CommandAllocator));

	if (vResult != S_OK)
	{
		MessageBox(nullptr, L"FAIL, Command Allocator was not created!", L"Working, but we have a problem!", MB_OK);
		return vResult;
	}

	// Now the command list
	vResult = mpD3dDevice->CreateCommandList(0, D3D12_COMMAND_LIST_TYPE_DIRECT, mpID3D12CommandAllocator, nullptr, 
		IID_PPV_ARGS(&mpID3D12GraphicsCommandList));
		
	if (vResult != S_OK)
	{
		MessageBox(nullptr, L"FAIL, Command List was not created!", L"Working, but we have a problem!", MB_OK);
		return vResult;
	}

	mpID3D12GraphicsCommandList->Close();	

	if (vResult == S_OK)
	{
		wstring vOutputMessage = L"Success - Command Objects were created";
		MessageBox(nullptr, vOutputMessage.c_str(), L"Working!!", MB_OK);
	}

	return vResult;
}
	
	
	

	
	
	
	