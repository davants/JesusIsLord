Terms:
	Symmetric - One Key, single secret
	ASymmetric - private/public keys (2)	
	RSA - is ASymmetric
	Encoding - Which is not encryption! Example, Base64.
	AES - symmetric encryption with a single key.

	Great Video on OAuth2, OpenId, JWT 
		https://www.youtube.com/watch?v=996OiexHze0&t=1207s
	
	Great Video on JWT and SSO and load balancing without session state.
		https://www.youtube.com/watch?v=67mezK3NzpU

	
	RS256 (RSA Signature with SHA-256 ) is an asymmetric algorithm , and it uses a 
		public/private key pair: the identity provider has a private (secret) key used to generate the 
		signature, and the consumer of the JWT gets a public key to validate the signature. Since the 
		public key, as opposed to the private key, doesn't need to be kept secured, most identity 
		providers make it easily available for consumers to obtain and use (usually through a 
		metadata URL).	Note that the original data is not encrypted, just a way to sign.
		
		There is some encryption involved; but the message data is not encrypted.
		See "Asymmetric encryption" below later in this document. The way this works is to 
		hash the data, no key or secret needed to hash, then Asymmetric encrypt the hash result.
		The client can decrypt the hash result with the public key and then validate the data 
		with the same hash algorithm.
		
	
	HS256 - symmetric algorithm 
		
	OAuth and signing -	At 0Auth we allow signing of tokens using either a symmetric algorithm (HS256), or an 
		asymmetric algorithm (RS256). HS256 tokens are signed and verified using a simple 
		secret, where as RS256 use a private and public key for signing and verifying the 
		token signatures.
		
	In OAuth2, the Authorization Code (or Authentication Grant) flow which has the "Grant" step 
		and then the client gets an Access Token using the Grant,...  sometime Access Tokens 
		are called Bearer tokens.
		
	In OAuth2, you can have other workflows like the 
		"Resource owner password credentials" (back channel only) 
		and also the "Client credentials" (back channel only)
		and "Implicit Flow" (front channel only)
		
		Implicit flow - The initial request is specified as "token" and not "Code"(grant).
		
	OpenId - a small add-on to OAuth2. In the initial request, a scope parameter if "openid" is added.
		This is to support Authentication.  Without this, OAuth2 is just doing Authorization.
		When the client gets back the Access Token, they also get a ID Token.
		The Open ID Token IS A JWT! 
	
	JWT format is header.payload.signature
	
	
	JWKS and JWK - URL that published keys.
		https://auth0.com/docs/jwks
		
		
	Base64Url - use base 64 Url as per - https://tools.ietf.org/html/rfc7515
		which is referenced in the IMS security document 
			here - https://www.imsglobal.org/spec/security/v1p0/#bib-RFC7515

	JWT is encoded in Base64Url! (not base64)
		Base64 and Base64Url are slightly different? The later is safe on a url?
	
	OAuth2 Authorization Code Flow
		Why the extra step of the Authentication Code to get to the Access token?
			The exchange of the Authentication Code for the Access token doesn
			not happen in the browser, it is server to server and also include
			a secret id as well. Therefore, if someone stole the Authentication code
			they would not be able to redeam it for an Access token.
			https://www.youtube.com/watch?v=996OiexHze0&t=1207s
	
	ASymmetric encryption - Things are encrypted by the private key and the public key can
		decrypt it. Only small amounts of data can be encrypted this way.
			
	Symmetric encryption - One secret is used to encrypted and decrypt the data. Large amounts
		of data can be encrypted with this.
		
	Safe Encryption of large amounts of data can be somewhat accomplished with both ASymmetric and 
		Symmetric together. Create a random hash and use it to encrypt the data with Symmetric
		encryption. Next, use ASymmetric encryption to encrypt the hash used as the secret.
			
	Hash - A fixed-size result obtained by applying a mathematical function (the hashing algorithm)
		to an arbitrary amount of data. (Also known as "message digest.")
			
	“SHA-2” “SHA-256 are the same thing. They are the same Hashing algorithm.		
			
	c++ Libraries
		https://docs.microsoft.com/en-us/windows/desktop/SecCNG/cng-portal
		
	c# Libraries
		RSACryptoServiceProvider - What I have used.
			https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.rsacryptoserviceprovider?view=netframework-4.7.2
			
		This may be a new one - https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.rsacng?view=netframework-4.7.2
		
		
	Iv - When doing symmetric encryption, with a single secret, it is important to have
		the value that needs to be encrypted start with different values. If the value 
		that needs to be encrypted always start with "from", for example, it is at risk
		of being decrypted. The Iv is the random leading chars/bytes to make each
		encrypted value safe from hackers. 
		The Iv does NOT have to be kept secret, it just needs to be random.
		
			
	Microsoft CNG - https://docs.microsoft.com/en-us/windows/desktop/SecCNG/signing-data-with-cng
		Data signing does not protect the data. It only to verifies the integrity of the data. 
		The sender hashes that data and signs (encrypts) the hash by using a private key. 
		The intended recipient performs verification by creating a hash of the data received, 
		decrypting the signature to obtain the original hash, and comparing the two hashes.
		
			
			