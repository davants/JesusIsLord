This course has a set of projects that will help you program in DirectX.  This is a very long road but rewarding.

This course uses the book "3D Game Programming with DirectX12"; however, the book is not used until the end
because this assumes there are many areas of c++, and overall programming, that the student is not 
familiar with and needs help. By the end of this course, many c++ concepts will be reviewed and then
the book is used from that point on. The program built in this course is not exactly like the book sample
on purpose. This is to force the student to understand and not copy/paste their way through the course.

Complete each project as listed below. Some projects are lessons.  The lesson may have its own sub-projects. 
If you have already done one of the projects, just re-read them but you don't have to do the work.
If you have already done them, but don't remember them; you need to do them again.



-----------------------------------------
Projects
Place all work in the following directory structure: c:/modules/YourName/DX12Course101/ProjectNameHere/...

After several lessons, we will start to use github, an online place to put your code, so the directory will not change after that is started.



This course takes you to creating a box on the screen using DirectX.
This course is a combination of C++ lessons and DirectX lesson.

At the bottom of this document is APPENDIX A. 
APPENDIX A is a high level list of DirectX objects and API calls that we will be building/working toward.
After each DirectX lesson, you can see how each lesson's components fix into the larger application.

-------------------------------------------



Book - At some point in the course you will start reading the book "3D Game Programming with DirectX 12".
	It might be a good idea to read chapter 4 and then start these lessons; however, if you are not
	skilled in c++ you may need to wait and go though the lessons first. This is because these
	lessons go beyond the book and contain c++ lessons along the way.




Proj_CppSimpleWindowsApp
	Finish lesson CppSimpleWindowsApp

Proj_CppPointers 
	Finish lesson CppPointers

Proj_CppPointerToPointer 	
	Finish lesson CppPointerToPointer

Proj_CppPreprocessor
	Finish lesson CppPreprocessor

Proj_CppVector
	Finish lesson CppVector

Proj_CppFactory
	Finish lesson CppFactory

Proj_IDXGIFactory4
	Complete the following 
		As always, create a project directory using the directory structure listed at the top of this course.
		Copy the application you created for the CppSimpleWindowsApp project to the new directory for this project.
			For example, for me I will copy directory DavantAppABC 
				FROM Folder: C:\modules\Davant\DX12Course101\Proj_CppSimpleWindowsApp\
				TO Folder:   C:\modules\Davant\DX12Course101\Proj_IDXGIFactory4\
		Rename the cpp file that contains "main" to Proj_IDXGIFactory4.cpp.
		Use lesson DX12_IDXGIFactory4 as a guide to add the direct x factory to your application.
		Compile and run the application. 

Proj_CppTypeDef
	Finish lesson CppTypeDef
	
Proj_ID3D12Device
	Complete the following 
		As always, create a project directory using the directory structure listed at the top of this course.
		Copy the application you created for the Proj_IDXGIFactory4 project to the new directory for this project.
			For example, for me I will copy directory DavantAppABC 
				FROM Folder:  C:\modules\Davant\DX12Course101\Proj_IDXGIFactory4\
				TO Folder:    C:\modules\Davant\DX12Course101\Proj_ID3D12Device\
		Rename the cpp file that contains "main" to Proj_ID3D12Device.cpp.
		Compile and run the application.
		Using lesson DX12_ID3D12Device create the interface to the GPU adaptor.


Pro_CppConst
	Finish lesson CppConst 


Pro_CppOperatorOverloading
	Finish lesson CppOperatorOverloading.

Pro_CppAssert
	Finish lesson CppAssert

Proj_CppTemplates
	Complete Lesson CppTemplates

Proj_CppInheritance
	Finish lesson CppInheritance

Proj_CppPolymorphism
	Finish lesson CppPolymorphism 


Proj_COM_Review
	Read lesson DX12_COM.
	There is no program for this lesson.


Proj_ComAndAdaptorToCreateID3D12Device
	Complete the following 
		As always, create a project directory using the directory structure listed at the top of this course.
		Copy the application you created for the Proj_ID3D12Device project to the new directory for this project.
			For example, for me I will copy directory DavantAppABC 
				FROM Folder:  C:\modules\Davant\DX12Course101\Proj_ID3D12Device\
				TO Folder:    C:\modules\Davant\DX12Course101\Proj_ComAndAdaptorToCreateID3D12Device\
		Rename the cpp file that contains "main" to Proj_ComAndAdaptorToCreateID3D12Device.cpp.
		Compile and run the application.
		Using lesson DX12_ComAndAdaptorToCreateID3D12Device update the code.
		Compile and run the application.


Proj_CppMap
	Finish lesson CppMap


Proj_CppVector2
	Finish lesson CppVector2

Proj_CppAuto
	Finish lesson CppAuto

Proj_CppProjectFilesAndCodeOrganization
	Finish lesson CppProjectFilesAndCodeOrganization 

Proj_CppVisualStudioOutputDebugInfo
	Finish lesson CppVisualStudioOutputDebugInfo
	

Proj_AddOutputDebugString
	Complete the following 
		As always, create a project directory using the directory structure listed at the top of this course.
		Copy the application you created for the Proj_ComAndAdaptorToCreateID3D12Device project to the new directory for this project.
			For example, for me I will copy directory DavantAppABC 
				FROM Folder:  C:\modules\Davant\DX12Course101\Proj_ComAndAdaptorToCreateID3D12Device\
				TO Folder:    C:\modules\Davant\DX12Course101\Proj_AddOutputDebugString\
		Rename the cpp file that contains "main" to Proj_AddOutputDebugString.cpp.
		Compile and run the application.
		Using lesson DX12_AddOutputDebugString, update the code.
		Compile and run the application.


Proj_CppWindowsLoop
	Complete the following 
		As always, create a project directory using the directory structure listed at the top of this course.
		Copy the application you created for the CppSimpleWindowsApp project to the new directory for this project.
			For example, for me I will copy directory DavantAppABC 
				FROM Folder: C:\modules\Davant\DX12Course101\Proj_CppSimpleWindowsApp\
				TO Folder:   C:\modules\Davant\DX12Course101\Proj_CppWindowsLoop\
		Rename the cpp file that contains "main" to Proj_CppWindowsLoop.cpp.
		Complete lesson CppWindowsLoop 


Proj_CppStaticVariableInAClass
	Complete lesson CppStaticVariableInAClass.


Proj_Github_Setup
	Complete the Github_Setup lesson.

Proj_Github_UpdateCloudWithChanges
	Complete the Github_UpdateCloudWithChanges lesson.

Proj_Github_GetARepository
	Create a lesson on how to get an existing repository on a new computer.

Proj_Github_Pull
	Complete the Github_Pull lesson. This actually does not have any steps, just covers the difference between "Clone" and "Push".


	
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------

Setup Github!!!
Moving forward, we will use github to store your code so the project name will not match the directory anymore.
We will use the same directory for the remaining Dx12 lessons.

In the github app, create a new repository named "Dx12CourseApp" in the C:\modules\your name\DX12Course101\

In the previous Dx12 lesson, you have code in the (C:\modules\you name\DX12Course101\Proj_AddOutputDebugString\YournameAppABC\) directory.
Copy all the files from that directory to the github directory you just created.
	For example I copied: 
		Directory DavantAppABC
		File DavantAppABC.sln
	If you see the ".vs" directory, you don't have to copy it. It will get generated the next time you compile in Visual Studio.
		


Now go to the github application and you should see all the files.
Commit to the local repository, give it a summary like "initial load".
Now publish to the github cloud. 

Open the solution.
Rename the file that has WinMain from "Proj_AddOutputDebugString.cpp" to "Proj_Dx12App.cpp".

Go back into github and you should see this change.
Notice it has a negative red [-] next to "Proj_AddOutputDebugString.cpp" because it does not exist anymore.
Notice is has a plus green [+] next to the file named "Proj_Dx12App.cpp" because it is a new one. Github does not know you changed the
	name, it only knows that one is gone and another has appreared.

There are several Visual Studio files that keep logs and other data that are not needed in github. They take up a large amound of memory
	so we want to set github to ignore them.
In github, look for a file that has an extension of ".ipch". It is usually a long filename. Right click on it and select "Ignore all .ipch files".
	The file still exists but will not be shown in github.
	Do the same for extension ".tlog".
	Do the same for extension ".log".

Commit your code and then publish to the cloud. You can add the summery name "clean up things" if you wish.

You are now ready to move on to the next set of projects.

------------------------------------------------------------------------------
------------------------------------------------------------------------------



Proj_DX12AddWindowsMessageLoop - NO NEW DIRECTORY - DO NOT create this directory for this project!	
	You will use your new directory that is using github.
	Open the visual studio solution.  It is located in the directory you just created for the github repository. 
		For example, for me it is: C:\modules\Davant\DX12Course101\Dx12CourseApp\

	This project will add in the windows loop code we did in project Proj_CppWindowsLoop.  

	This means the program from this lesson will have a windows message loop and the DirectX components from the DX lessons we have so far.
	This lesson will start to use github to keep your code files.

	Complete lesson DX12_AddWindowsMessageLoop.
	
	Git Tag lesson
		Now that you have updated github, it is time to "TAG" your code. Tagging your code creates a "Point in Time" copy
		of your code. 
		Review the github lesson "Github_Tag", and use the tag "v1.001_DX12_AddWindowsMessageLoop" to tag your project.



Proj_DX12CommandQueue 
	Open the visual studio solution.  It is located in the directory you just created for the github repository. 
		For example, for me it is: C:\modules\Davant\DX12Course101\Dx12CourseApp\
	
	Complete lesson DX12_CommandQueue.
	
	Github - "Commit to Master", give it a nice summary name, and then "Push origin" which will push it to the github cloud.
	
	Git Tag lesson
		Now that you have updated github, it is time to "TAG" your code. Tagging your code creates a "Point in Time" copy
		of your code. 
		Review the github lesson "Github_Tag", and use the tag "v1.002_Proj_DX12CommandQueue" to tag your project.
		Using a browser, go to your online github repository and see if you see the new tag under "releases".


Proj_DX12CommandListAndCommandAllocator	
	Open the visual studio solution.  It is located in the directory you just created for the github repository. 
		For example, for me it is: C:\modules\Davant\DX12Course101\Dx12CourseApp\

	Complete lesson DX12CommandListAndCommandAllocator.
	
	Github - "Commit to Master", give it a nice summary name, and then "Push origin" which will push it to the github cloud.
	
	Git Tag lesson
		Now that you have updated github, it is time to "TAG" your code. Tagging your code creates a "Point in Time" copy
		of your code. 
		Review the github lesson "Github_Tag" if needed, and use the tag "v1.003_Proj_DX12CommandListAndCommandAllocator" 
		to tag your project.
		Using a browser, go to your online github repository and see if you see the new tag under "releases".
		
		
Proj_DX12SwapChain
	Open the visual studio solution.  
		For example, for me it is: C:\modules\Davant\DX12Course101\Dx12CourseApp\

	Complete lesson DX12_SwapChain.
	
	Github - "Commit to Master", give it a nice summary name, and then "Push origin" which will push it to the github cloud.
	
	Git Tag lesson
		Now that you have updated github, it is time to "TAG" your code. Tagging your code creates a "Point in Time" copy
		of your code. 
		Review the github lesson "Github_Tag" if needed, and use the tag "v1.004_Proj_DX12_SwapChain" 
		to tag your project.
		Using a browser, go to your online github repository and see if you see the new tag under "releases".

	
		

------------------------------------------------------------------------------
------------------------------------------------------------------------------
		
BOOK - Time to Read!
	OK, we have waited long enough and it's time to read the book!  
	The first few chapters, 1-3, cover math and geometry so I will not focus on those at this point.
	Read chapter 4 of the book "3D Game Programming with DirectX 12".
		
------------------------------------------------------------------------------
------------------------------------------------------------------------------
		
	
Proj_DX12_DXGI_SAMPLE_DESC	
	This lesson does not have any code changes unless you want to try different multisample count options.
	It is here to review section 4.1.8 in the book.

	
	
Proj_Chapter4
	Open the visual studio solution.  
		For example, for me it is: C:\modules\Davant\DX12Course101\Dx12CourseApp\

	From here on out, you will be using the book.  Use the book to finish the initialization of DirectX.
	There are a few things still to do. Like the other objects that are setup, create functions for each
	of the following components and member variables in your myDirectX class.
	The following components still need to be added and initialized.
	
		Add "Render Target View Descriptor" and "Depth Stencil View Descriptor" Heaps
		Add a Fence.
	
	Github - "Commit to Master", give it a nice summary name, and then "Push origin" which will push it to the github cloud.
	
	Git Tag lesson
		Now that you have updated github, it is time to "TAG" your code. Tagging your code creates a "Point in Time" copy
		of your code. 
		Review the github lesson "Github_Tag" if needed, and use the tag "v1.005_Proj_Chapter4" 
		to tag your project.
		Using a browser, go to your online github repository and see if you see the new tag under "releases".



Done!  Wow, you did it!

Below is a high level list of the components you worked with in this course.


-----------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------

APPENDIX A - High Level Components and API Calls

DirectX Application

		Window's window and message loop
		IDXGIFactory4 * mpDxgiFactory;
		ID3D12Device * mpD3dDevice;
		IDXGIAdapter1 * mpHardwareAdapter;
		ID3D12CommandQueue * mpID3D12CommandQueue;
		ID3D12CommandAllocator * mpID3D12CommandAllocator;
		ID3D12GraphicsCommandList * mpID3D12GraphicsCommandList;
		IDXGISwapChain * name TBD;
		ID3D12Fence * name TBD;
		D3D12_VIEWPORT mScreenViewport;
		D3D12_RECT mScissorRect;
		ID3D12RootSignature  * name TBD;		
		ID3D12DescriptorHeap mCbvHeap; // Constant Buffer View Descriptor Heap
		ID3D12Resource mObjectCB; // Constant Buffer for World View Projection matrix
		ID3D12Resource  * name TBD; // MeshGeometry Vertex Buffer
		ID3D12Resource  * name TBD; // MeshGeometry Index Buffer		
		ID3DBlob mvsByteCode; // Vertex Shader Byte code
		ID3DBlob mpsByteCode; // Pixel Shader Byte Code		
		D3D12_INPUT_ELEMENT_DESC mInputLayout; 		
		ID3D12PipelineState mPSO; // Pipeline State objects		
		XMFLOAT4X4 mWorld; // Holds the World Space transformation.
		XMFLOAT4X4 mView; // Holds the View/Camera Space transformation.
		XMFLOAT4X4 mProj; // Holds the Projection transformation.
		
		ToDo - There are several other supporting properties that need to be added.
		
	On Each Draw Call - 60+ times a seconds do the following:
		Update()
			In this example, the box is the only object and it is always at position 0,0,0.
			Get the camera's position in world space.
			Calculate the World View Projection matrix for the box. 
			Update the GPU constant buffer resource that holds the world view projection for the
			object by using the interface object mObjectCB we created when the game started.

		Draw()
			
			Draw the box by calling the draw indicies function.
			
			Wait for the fence to be cleared.
			
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		










