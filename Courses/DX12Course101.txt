This course has a set of projects that will help you program in DirectX.  This is a very long road but rewarding.

Complete each project as listed below. Some projects are lessons.  The lesson may have its own sub-projects. 
If you have already done one of the projects, just read through it but don't do the work.

DO NOT PUT ANY ORDER IN THE PROJECT NAMES!


-----------------------------------------
Projects
Place all work in the following directory structure: c:/modules/YourName/DX12Course101/ProjectNameHere/...

After several lessons, we will start to use github, an online place to put your code, so the directory will not change after that is started.



Proj_CppSimpleWindowsApp
	Finish lesson CppSimpleWindowsApp

Proj_CppPointers 
	Finish lesson CppPointers

Proj_CppPointerToPointer 	
	Finish lesson CppPointerToPointer

Proj_CppPreprocessor
	Finish lesson CppPreprocessor

Proj_CppVector
	Finish lesson CppVector

Proj_CppFactory
	Finish lesson CppFactory

Proj_IDXGIFactory4
	Complete the following 
		As always, create a project directory using the directory structure listed at the top of this course.
		Copy the application you created for the CppSimpleWindowsApp project to the new directory for this project.
			For example, for me I will copy directory DavantAppABC 
				FROM Folder: C:\modules\Davant\DX12Course101\Proj_CppSimpleWindowsApp\
				TO Folder:   C:\modules\Davant\DX12Course101\Proj_IDXGIFactory4\
		Rename the cpp file that contains "main" to Proj_IDXGIFactory4.cpp.
		Use lesson DX12_IDXGIFactory4 as a guide to add the direct x factory to your application.
		Compile and run the application. 

Proj_CppTypeDef
	Finish lesson CppTypeDef
	
Proj_ID3D12Device
	Complete the following 
		As always, create a project directory using the directory structure listed at the top of this course.
		Copy the application you created for the Proj_IDXGIFactory4 project to the new directory for this project.
			For example, for me I will copy directory DavantAppABC 
				FROM Folder:  C:\modules\Davant\DX12Course101\Proj_IDXGIFactory4\
				TO Folder:    C:\modules\Davant\DX12Course101\Proj_ID3D12Device\
		Rename the cpp file that contains "main" to Proj_ID3D12Device.cpp.
		Compile and run the application.
		Using lesson DX12_ID3D12Device create the interface to the GPU adaptor.


Pro_CppConst
	Finish lesson CppConst 


Pro_CppOperatorOverloading
	Finish lesson CppOperatorOverloading.

Pro_CppAssert
	Finish lesson CppAssert

Proj_CppTemplates
	Complete Lesson CppTemplates

Proj_CppInheritance
	Finish lesson CppInheritance

Proj_CppPolymorphism
	Finish lesson CppPolymorphism 


Proj_COM_Review
	Read lesson DX12_COM.
	There is no program for this lesson.


Proj_ComAndAdaptorToCreateID3D12Device
	Complete the following 
		As always, create a project directory using the directory structure listed at the top of this course.
		Copy the application you created for the Proj_ID3D12Device project to the new directory for this project.
			For example, for me I will copy directory DavantAppABC 
				FROM Folder:  C:\modules\Davant\DX12Course101\Proj_ID3D12Device\
				TO Folder:    C:\modules\Davant\DX12Course101\Proj_ComAndAdaptorToCreateID3D12Device\
		Rename the cpp file that contains "main" to Proj_ComAndAdaptorToCreateID3D12Device.cpp.
		Compile and run the application.
		Using lesson DX12_ComAndAdaptorToCreateID3D12Device update the code.
		Compile and run the application.


Proj_CppMap
	Finish lesson CppMap


Proj_CppVector2
	Finish lesson CppVector2

Proj_CppAuto
	Finish lesson CppAuto

Proj_CppProjectFilesAndCodeOrganization
	Finish lesson CppProjectFilesAndCodeOrganization 

Proj_CppVisualStudioOutputDebugInfo
	Finish lesson CppVisualStudioOutputDebugInfo
	

Proj_AddOutputDebugString
	Complete the following 
		As always, create a project directory using the directory structure listed at the top of this course.
		Copy the application you created for the Proj_ComAndAdaptorToCreateID3D12Device project to the new directory for this project.
			For example, for me I will copy directory DavantAppABC 
				FROM Folder:  C:\modules\Davant\DX12Course101\Proj_ComAndAdaptorToCreateID3D12Device\
				TO Folder:    C:\modules\Davant\DX12Course101\Proj_AddOutputDebugString\
		Rename the cpp file that contains "main" to Proj_AddOutputDebugString.cpp.
		Compile and run the application.
		Using lesson DX12_AddOutputDebugString, update the code.
		Compile and run the application.


Proj_CppWindowsLoop
	Complete the following 
		As always, create a project directory using the directory structure listed at the top of this course.
		Copy the application you created for the CppSimpleWindowsApp project to the new directory for this project.
			For example, for me I will copy directory DavantAppABC 
				FROM Folder: C:\modules\Davant\DX12Course101\Proj_CppSimpleWindowsApp\
				TO Folder:   C:\modules\Davant\DX12Course101\Proj_CppWindowsLoop\
		Rename the cpp file that contains "main" to Proj_CppWindowsLoop.cpp.
		Complete lesson CppWindowsLoop 


Proj_CppStaticVariableInAClass
	Complete lesson CppStaticVariableInAClass.


Proj_Github_Setup
	Complete the Github_Setup lesson.

Proj_Github_UpdateCloudWithChanges
	Complete the Github_UpdateCloudWithChanges lesson.

Proj_Github_GetARepository
	Create a lesson on how to get an existing repository on a new computer.

Proj_Github_Pull
	Complete the Github_Pull lesson. This actually does not have any steps, just covers the difference between "Clone" and "Push".


	
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------

Setup Github!!!
Moving forward, we will use github to store your code so the project name will not match the directory anymore.
We will use the same directory for the remaining Dx12 lessons.

In the github app, create a new repository named "Dx12CourseApp" in the C:\modules\your name\DX12Course101\

In the previous Dx12 lesson, you have code in the (C:\modules\you name\DX12Course101\Proj_AddOutputDebugString\YournameAppABC\) directory.
Copy all the files from that directory to the github directory you just created.
	For example I copied: 
		Directory DavantAppABC
		File DavantAppABC.sln
	If you see the ".vs" directory, you don't have to copy it. It will get generated the next time you compile in Visual Studio.
		


Now go to the github application and you should see all the files.
Commit to the local repository, give it a summary like "initial load".
Now publish to the github cloud. 

Open the solution.
Rename the file that has WinMain from "Proj_AddOutputDebugString.cpp" to "Proj_Dx12App.cpp".

Go back into github and you should see this change.
Notice it has a negative red [-] next to "Proj_AddOutputDebugString.cpp" because it does not exist anymore.
Notice is has a plus green [+] next to the file named "Proj_Dx12App.cpp" because it is a new one. Github does not know you changed the
	name, it only knows that one is gone and another has appreared.

There are several Visual Studio files that keep logs and other data that are not needed in github. They take up a large amound of memory
	so we want to set github to ignore them.
In github, look for a file that has an extension of ".ipch". It is usually a long filename. Right click on it and select "Ignore all .ipch files".
	The file still exists but will not be shown in github.
	Do the same for extension ".tlog".
	Do the same for extension ".log".

Commit your code and then publish to the cloud. You can add the summery name "clean up things" if you wish.

You are now ready to move on to the next set of projects.

------------------------------------------------------------------------------
------------------------------------------------------------------------------



Proj_DX12AddWindowsMessageLoop - NO NEW DIRECTORY - DO NOT create this directory for this project!	
	You will use your new directory that is using github.
	Open the visual studio solution.  It is located in the directory you just created for the github repository. 
		For example, for me it is: C:\modules\Davant\DX12Course101\Dx12CourseApp\

	This project will add in the windows loop code we did in project Proj_CppWindowsLoop.  

	This means the program from this lesson will have a windows message loop and the DirectX components from the DX lessons we have so far.
	This lesson will start to use github to keep your code files.

	Complete lesson DX12_AddWindowsMessageLoop.
	
	Git Tag lesson
		Now that you have updated github, it is time to "TAG" your code. Tagging your code creates a "Point in Time" copy
		of your code. 
		Review the github lesson "Github_Tag", and use the tag "v1.001_DX12_AddWindowsMessageLoop" to tag your project.
	


Proj_DX12CommandQueue 
	Open the visual studio solution.  It is located in the directory you just created for the github repository. 
		For example, for me it is: C:\modules\Davant\DX12Course101\Dx12CourseApp\
	
	Complete lesson DX12_CommandQueue.
	
	Github - "Commit to Master", give it a nice summary name, and then "Push origin" which will push it to the github cloud.
	
	Git Tag lesson
		Now that you have updated github, it is time to "TAG" your code. Tagging your code creates a "Point in Time" copy
		of your code. 
		Review the github lesson "Github_Tag", and use the tag "v1.002_Proj_DX12CommandQueue" to tag your project.
		Using a browser, go to your online github repository and see if you see the new tag under "releases".
	


	
Proj_DX12CommandListAndCommandAllocator	
	WORKING HERE...  
	
	

Proj_DX12SwapChain
	ToDo - create lesson

Proj_.... What else is needed to paint a blue screen????









Working .. what is next in the book?
	Go through chapter 4 and everywhere there is code that is in the ch 4 code sample, create a lesson to add that code.
	After the entire chapter is accounted for, have the student read chapter 4.

	Outline each section of the book and create content where needed.
	4.1 - Preliminaries
	4.1.1 - Direct3D 12 Overview - high level, no code needed
	4.1.2 - Com - already covered in com lessons
	4.1.3 - Texture Formats - high level
	4.1.4 - Swap Chain and Page Flipping
		Maybe create the swap chain and talk about textures.
	4.1.5 - Depth Buffering
		Maybe create this texture and review it.
	4.1.6 - Resources and Descriptors
		Maybe create descriptors if they are needed in the ch 4 code?
	4.1.7 - Multisampling Theory
		Notice the word "sampling" - later we will create a sampler.
		Supersampling renders to 4 times the needed resolution.
		Multisampling looks at the neighboring pixils and takes an average. This is faster.
	4.1.8 - Multisampling in Direct3D
		Multi sample section covers querying for support, but we use the next section "feature" levels.
	4.1.9 - Feature Levels
		Done - Lesson is done!
	4.1.10 - DirectX Graphics Infrastructure
		Done - Lesson is done, but add the Output Debug string
		Done - Add a lesson that adds the Output Debug string. This should be a c++ lesson and not be part of the Dx lesson. 
			Done - Create lesson				
			Done - After done, add the lesson to this course above.  
		Done - Next, add a 
			DX lesson that adds this code to the adapter loop.
	4.1.11 Checking Feature support
	4.1.12 Residency - The book does not manage residency. By default, adding a resource makes it resident and deleting it makes it evicted.

	4.2.1 The command queue and command list
		WORKING HERE...
			Create lesson above as this section is read.  
				
	4.2.2 CPU/GPU Synchronization
		Try not to add this lesson until we have already send a command list to the GPU that paints the screen.
		To make it work without synchonization, have the c++ code sleep for 10 seconds to make sure the old allocator is empty.

			
Remember, try to create lessons for each thing if possible. One that teaches the thing and one that adds it to the DX project.










